#!/bin/bash
#===================================================================================
# WIFI MANAGER CLI
# FILE: wifi-manager
#
# DESCRIPTION: a simple wifi manager CLI
#
# AUTHOR: Leonardo Marco
# VERSION: 1.0
# CREATED: 2020.03.29
#===================================================================================

#=== GLOBAL VARIABLES DEFINITION ===============================================
dependences="iwgetid iwlist wpa_supplicant wpa_cli dhclient ip sudo"
unset iface				# iface to use
unset ssid_current		# Current ssid connected

unset n_networks
unset addresses
unset channels
unset essids
unset qualities
unset keys
declare -A id_networkds




function wpa_cli-check {
	pgrep wpa_supplicant &>/dev/null || return 1
	wpa-cli -h >/dev/null || return 2
	return 0
}



function wpa_cli-is_stored {
	local ssid="$1"
	wpa_cli -i "$iface" list_networks 2>/dev/null | grep "^[0-9][[:blank:]]" | cut -f2 | grep "^${ssid}$" &>/dev/null
	return $?
}

function wpa_cli-get-id {
	local ssid="$1"
	wpa_cli -i $iface list_networks | grep "^[0-9][[:blank:]]" | cut -f1-2 | grep "[[:blank:]]${ssid}$" | cut -f1
}


function wpa_cli-add_network {
	echo hola
}


#=== FUNCTION ==================================================================
# NAME: print_signal_bar
# DESCRIPTION: prints a wifi singal bar from a signal value like 33/70
# PARAM1: signal like 33/70
#===============================================================================
function print_signal_bar {
    local a=$(echo "$1" | cut -f1 -d "/")
    local b=$(echo "$1" | cut -f2 -d "/")
	local p=$((a*100/b))	# Percent
	
	if [ "$p" -le 12 ]; then
		echo "$p%  ____" 
	elif [ "$p" -le 37 ]; then
		echo "$p%  ▂___"
	elif [ "$p" -le 62 ]; then
		echo "$p%  ▂▄__"
	elif [ "$p" -le 85 ]; then
		echo "$p%  ▂▄▆_"
	elif [ "$p" -le 100 ]; then
		echo "$p%$([ "$p" -lt 100 ] && echo " ") ▂▄▆█"
	else
		echo "ERROR"
	fi
}


#=== FUNCTION ==================================================================
# NAME: scan
# DESCRIPTION: scan visible wifi networks ssid and fill arrays: address, channels, qualities, keys and essids
#===============================================================================
function scan {
    IFS2="$IFS"; IFS=$'\n'

    [ ! "$(ip link show $iface up)" ] && sudo ip link set dev $iface up
	
    echo -e "\e[1mScaning interface $iface...\e[0m"
    local scan="$(sudo iwlist "$iface" scan | egrep "Address|ESSID|Quality|Channel|Encryption key")"
	
    addresses=($(echo "$scan" | grep Address: | egrep -o "([0-9A-F]{2}:)+[0-9A-F]{2}"))
    channels=($(echo "$scan" | grep Channel: | cut -f2 -d:))
    qualities=($(echo "$scan" | grep Quality | egrep -o "[0-9]+/[0-9]+"))
    keys=($(echo "$scan" | grep "Encryption key" | cut -f 2 -d:))
    essids=($(echo "$scan" | grep ESSID | cut -f2 -d:))
    n_networks="${#addresses[*]}"

    # Loop scaned networks for complete empty ssids and sotred array
    for n in $(seq 0 $((n_networks-1))); do
    	local addr="${addresses[$n]}"
        local ssid="${essids[$n]}"
        ssid="$(echo "$ssid" | cut -f2 -d\")"
        [ ! "$ssid" ] && ssid="$addr"
        essids[$n]="$ssid"

        wpa_cli-is_stored "$ssid" && stored[$n]="*"
        id_networkds["$ssid"]=$(wpa_cli-get-id "$ssid")
    done
    IFS="$IFS2"
}


#=== FUNCTION ==================================================================
# NAME: list
# DESCRIPTION: print the list of scanned SSIDS and show in columns
#===============================================================================
function list {
    (
    IFS=$'\n'
    echo -e "\e[1mNUM␟  SIGNAL␟SSID␟CHANNEL␟ENCRYPT␟SAVED\e[0m"
    for n in $(seq 0 $((n_networks-1))); do
		local addr="${addresses[$n]}"
        local ssid="${essids[$n]}"
        local channel="${channels[$n]}"
        local quality="${qualities[$n]}"
        quality="$(print_signal_bar $quality)"
        local key="${keys[$n]}"
       	local saved="${stored[$n]}"

		[ "$ssid" = "$ssid_current" ] && echo -en "\e[32m\e[1m"
        echo -e "[$((n+1))]␟$quality␟$ssid␟$channel␟$key␟$saved${id_networkds["$ssid"]}"
		[ "$ssid" = "$ssid_current" ] && echo -en "\e[0m"
    done
    echo
    ) | column -t -s "␟"
}


#=== FUNCTION ==================================================================
# NAME: disconnect
# DESCRIPTION: disconnect current wifi connection and down wlan iface
#===============================================================================
function disconnect {
	echo -e "\n\e[1mDisconnecting from $ssid_current\e[0m"
	sudo killall wpa_supplicant
	sudo dhclient -v -r "$iface"
	sudo ip link set dev $iface down	
}




function connect_no-saved {
	local ssid="$1"
	local pass="$2"

	echo -e "\n\e[1mConnecting to $ssid_current\e[0m"
	wpa_supplicant -B -i "$iface" -c <(wpa_passphrase "$ssid" "$pass")

	echo -e "\n\e[1mGetting DHCP address\e[0m"
	sudo dhclient -v "$iface"
}

function wpa_cli-connecto_notsaved {
	local ssid="$1"
	local pass="$2"

	local ndi="$(wpa_cli -i "$iface" add_network)"
	wpa_cli -i "$iface" 

}


function wpa_cli-connect_saved {
	local ssid="$1"
	local nid="${id_networkds["$ssid"]}" 

	wpa_cli -i "$iface" select_network "$nid"
	sudo dhclient -v "$iface"
}


#=== FUNCTION ==================================================================
# NAME: connect
# DESCRIPTION: connect to ssid and ask for password
# PARAM1: ssid to connect
#===============================================================================
function connect {
	local ssid="$1"
	local pass
	
	if [ "$ssid_current" ]; then
		disconnect "$iface"
		[ "$ssid_current" = "$ssid" ] && exit
	fi
	
	# Read pass
	echo -en "\e[1m$ssid\e[0m password: "
	read pass
	
	echo -e "\n\e[1mConnecting to $ssid_current\e[0m"
	sudo bash -c 'wpa_supplicant -B -i "'"$iface"'" -c <(wpa_passphrase "'"$ssid"'" "'"$pass"'")'
	
	echo -e "\n\e[1mGetting DHCP address\e[0m"
	sudo dhclient -v $iface
}



#=== FUNCTION ==================================================================
# NAME: check_dependences
# DESCRIPTION: checks for script dependences and exit if not found any
#===============================================================================
function check_dependences {
	local deps_err=""
	
	for d in $dependences; do
		! which "$d" &>/dev/null && deps_err="$deps_err${deps_err:+" "}$d"
	done
	
	[ "$deps_err" ] && error_msg "Missing dependences: $deps_err\nPlease, solve dependences and try it again" 1
	
	return 0
}



#=== FUNCTION ==================================================================
# NAME: help
# DESCRIPTION: checks for script dependences and exit if not found any
#===============================================================================
function help {
	echo "Usage $(basename $0) [-h] [-i iface]"
	exit $1
}


#=== FUNCTION ==================================================================
# NAME: error
# DESCRIPTION: show error message and exit
# PARAM1: msg
# PARAM2: exit code 
#===============================================================================
function error_msg {
	local msg="$1"
	local ecode="$2"

	echo -e "$msg" 1>&2
	[ "$ecode" ] && exit "$ecode"
}


#=== FUNCTION ==================================================================
# NAME: main function
# DESCRIPTION: start function
#===============================================================================
function main {
	# PARAMETERS
	while getopts ":hi:s:" p; do
		case $p in
			h) 	help 0									;;
			i) 	iface="$OPTARG" 						;;
			s)	ssid="$OPTARG"							;;
			\?) error_msg "Unknow option: -$OPTARG" 1	;;
		esac
	done


	# CHECK DEPENDENCES
	check_dependences
	
	# SET GLOBAL VARIABLES VALUES
	if [ "$iface" ]; then
		ip a show dev "$iface" >/dev/null || exit 1
	else 
    	iface="$(iw dev | awk '$1=="Interface"{print $2}' | head -1)"
    fi
	ssid_current="$(iwgetid $iface | cut -f2 -d: | cut -f2 -d\")"


	# SELECT NETWORK
	if [ ! "$ssid" ]; then
	    unset n_selected
	    while [ ! "$n_selected" ]; do
	        clear
	        scan
	        [ ${#addresses[*]} -eq 0 ] && { sleep 1; continue; }
	        list
			while ! ([ "$n_selected" -le ${#addresses[*]} ]&>/dev/null && [ "$n_selected" -ge 1 ]&>/dev/null); do
				echo
	        	read -p "Select network: " n_selected
				[ ! "$n_selected" ] && break
			done
	    done
	    local ssid="${essids[$((n_selected-1))]}"
	fi

	# CONNECT NETWORK
	connect "$ssid"
}

main "$@"



