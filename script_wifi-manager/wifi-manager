#!/bin/bash
#===================================================================================
# WIFI MANAGER CLI
# FILE: wifi-manager
#
# DESCRIPTION: Wifi connection manager CLI
#
# AUTHOR: Leonardo Marco
# VERSION: 1.0
# CREATED: 2020.03.29
#===================================================================================

#=== GLOBAL VARIABLES DEFINITION ===============================================
dependences="iwgetid iwlist wpa_supplicant dhclient ip sudo"
unset iface				# iface to use
unset ssid_current		# Current ssid connected


#=== FUNCTION ==================================================================
# NAME: print_signal_bar
# DESCRIPTION: prints a wifi singal bar from a signal value like 33/70
# PARAM1: signal like 33/70
#===============================================================================
function print_signal_bar {
    local a=$(echo "$1" | cut -f1 -d "/")
    local b=$(echo "$1" | cut -f2 -d "/")
	local p=$((a*100/b))
    local s=$(((a*100/b)/25+1)); [ $a -eq 0 ] && s=0		# Value from 0 to 5

    case $s in
    0) echo "$p% ____" ;;
    1) echo "$p% ▂___" ;;
    2) echo "$p% ▂▄__" ;;
    3) echo "$p%▂▄▆_" ;;
    [4-9]) echo "$p% ▂▄▆█" ;;
    esac
}


#=== FUNCTION ==================================================================
# NAME: scan
# DESCRIPTION: scan visible wifi networks ssid and fill arrays: address, channels, qualities, keys and essids
#===============================================================================
function scan {
    [ ! "$(ip link show $iface up)" ] && sudo ip link set dev $iface up
	
    echo -e "\e[1mScaning interface $iface...\e[0m"
    local scan="$(sudo iwlist "$iface" scan | egrep "Address|ESSID|Quality|Channel|Encryption key")"
    
    IFS=$'\n'
    addresses=($(echo "$scan" | grep Address: | egrep -o "([0-9A-F]{2}:)+[0-9A-F]{2}"))
    channels=($(echo "$scan" | grep Channel: | cut -f2 -d:))
    qualities=($(echo "$scan" | grep Quality | egrep -o "[0-9]+/[0-9]+"))
    keys=($(echo "$scan" | grep "Encryption key" | cut -f 2 -d:))
    essids=($(echo "$scan" | grep ESSID | cut -f2 -d: | cut -f2 -d\"))
}


#=== FUNCTION ==================================================================
# NAME: list
# DESCRIPTION: print the list of scanned SSIDS and show in columns
#===============================================================================
function list {
    (	
    echo -e "\e[1mNUM␟SIGNAL␟SSID␟CHANNEL␟ENCRYPT\e[0m"
    for n in $(seq 0 $((${#addresses[*]}-1))); do
		local addr="${addresses[$n]}"
        local ssid="${essids[$n]}"
		[ ! "$ssid" ] && ssid="$addr"
        local channel="${channels[$n]}"
        local quality="${qualities[$n]}"
        quality="$(print_signal_bar $quality)"
        local key="${keys[$n]}"
    
		[ "$ssid" = "$ssid_current" ] && echo -en "\e[32m\e[1m"
        echo -e "[$((n+1))]␟$quality␟$ssid␟$channel␟$key"
		[ "$ssid" = "$ssid_current" ] && echo -en "\e[0m"
    done
    echo
    ) | column -t -s "␟"
}


#=== FUNCTION ==================================================================
# NAME: disconnect
# DESCRIPTION: disconnect current wifi connection and down wlan iface
#===============================================================================
function disconnect {
	echo -e "\n\e[1mDisconnecting from $ssid_current\e[0m"
	sudo killall wpa_supplicant
	sudo dhclient -v -r "$iface"
	sudo ip link set dev $iface down	
}


#=== FUNCTION ==================================================================
# NAME: connect
# DESCRIPTION: connect to ssid and ask for password
# PARAM1: ssid to connect
#===============================================================================
function connect {
	local ssid="$1"
	local iface="$2"
	local pass
	
	if [ "$ssid_current" ]; then
		disconnect "$iface"
		[ "$ssid_current" = "$ssid" ] && exit
	fi
	
	# Read pass
	echo -en "\e[1m$ssid\e[0m password: "
	read pass
	
	echo -e "\n\e[1mConnecting to $ssid_current\e[0m"
	[ "$ssid_current" ] && dhclient -v -r "$iface"
	echo
	sudo bash -c 'wpa_supplicant -B -i "'"$iface"'" -c <(wpa_passphrase "'"$ssid"'" "'"$pass"'")'
	
	echo -e "\n\e[1mGetting DHCP address\e[0m"
	sudo dhclient -v $iface
}



#=== FUNCTION ==================================================================
# NAME: check_dependences
# DESCRIPTION: checks for script dependences and exit if not found any
#===============================================================================
function check_dependences {
	local deps_err=""
	
	for d in $dependences; do
		! which "$d" &>/dev/null && deps_err="$deps_err${deps_err:+" "}$d"
	done
	
	[ "$deps_err" ] && error_msg "Missing dependences: $deps_err\nPlease, solve dependences and try it again" 1
	
	return 0
}



#=== FUNCTION ==================================================================
# NAME: help
# DESCRIPTION: checks for script dependences and exit if not found any
#===============================================================================
function help {
	echo "Usage $(basename $0) [-h] [-i iface]"
	exit $1
}


#=== FUNCTION ==================================================================
# NAME: error
# DESCRIPTION: show error message and exit
# PARAM1: msg
# PARAM2: exit code 
#===============================================================================
function error_msg {
	local msg="$1"
	local ecode="$2"

	echo -e "$msg" 1>&2
	[ "$ecode" ] && exit "$ecode"
}


#=== FUNCTION ==================================================================
# NAME: main function
# DESCRIPTION: start function
#===============================================================================
function main {
	# PARAMETERS
	while getopts ":hi:s:" p; do
		case $p in
			h) 	help 0									;;
			i) 	iface="$OPTARG" 						;;
			s)	ssid="$OPTARG"							;;
			\?) error_msg "Unknow option: -$OPTARG" 1	;;
		esac
	done


	# CHECK DEPENDENCES
	check_dependences
	
	# SET GLOBAL VARIABLES VALUES
	if [ "$iface" ]; then
		ip a show dev "$iface" >/dev/null || exit 1
	else 
    	iface="$(iw dev | awk '$1=="Interface"{print $2}' | head -1)"
    fi
	ssid_current="$(iwgetid $iface | cut -f2 -d: | cut -f2 -d\")"


	# SELECT NETWORK
	if [ ! "$ssid" ]; then
	    unset n
	    while [ ! "$n" ]; do
	        clear
	        scan
	        [ ${#addresses[*]} -eq 0 ] && { sleep 1; continue; }
	        list
			while ! ([ "$n" -le ${#addresses[*]} ]&>/dev/null && [ "$n" -ge 1 ]&>/dev/null); do
	        	read -p "Select network: " n
				[ ! "$n" ] && break
			done
	    done
	    local ssid="${essids[$((n-1))]}"
	fi

	# CONNECT NETWORK
	connect "$ssid" "$iface"
}

main "$@"

