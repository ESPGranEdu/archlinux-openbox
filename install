#!/bin/bash
#===================================================================================
# DEBIAN OPENBOX INSTALL SCRIPT
# FILE: install
# DESCRIPTION: automatize Openbox installation in Debian
# AUTHOR: Leonardo Marco
# VERSION: 1.0
# CREATED: 2020.03.29
# LICENSE: GNU General Public License v3.0
#===================================================================================

#=== FUNCTION ======================================================================
# NAME: help
# DESCRIPTION: Show command help
#===================================================================================
function help() {
	echo -e 'Exec scripts actions
Usage: '$(basename $0)' [-l] [-a <actions>] [-y] [-d] [-h]
   \e[1m-l\e[0m\t\tOnly list actions 
   \e[1m-a <actions>\e[0m\tOnly do selected actions (e.g: -a 5,6,10-15)
   \e[1m-y\e[0m\t\tAuto-answer yes to all actions
   \e[1m-d\e[0m\t\tAuto-answer default to all actions
   \e[1m-h\e[0m\t\tShow this help'
	exit $1
}

#=== FUNCTION ======================================================================
# NAME: ask_action
# DESCRIPTION: ask for a action and determine if do it or not do
# EXIT CODE:
#	0-> do the action
#	1-> dont do de action
#===================================================================================
n=0
function ask_action() {
	action="$1"
	info="$2"
	default="${3,,}"
	default="${default:0:1}"
	[ "$default" != "n" ] && default="y"
	n=$((n + 1))

	# Skip action if not in -a
	[ "$actions" ] && { echo "$actions" | grep -w "$n" &>/dev/null || return 1; }

	[ "$list" ] && echo -e "[$n] $action ($default)" && return 1

	# Show action
	[ "${default,,}" = "y" ] && q="(Y/n)?" || q="(y/N))?"
	echo -en "\n\e[33m${info}\n\e[39m\e[1m[$n] \e[4m${action}\e[0m $q "

	case "$yes" in
	allyes)
		q="y"
		echo "$q"
		;;
	default)
		q="$default"
		echo "$q"
		;;
	*)
		read q
		q="${q,,}"
		q="${q:0:1}"
		;;
	esac

	[ "$q" != "n" ] && [ "$q" != "y" ] && q="$default"
	[ "${q,,}" != "n" ] && return 0
	return 1
}

#=== PARAMS ========================================================================
while getopts ":hlyda:" o; do
	case "$o" in
	h) help ;;
	l) list="true" ;;
	y) yes="allyes" ;;
	d) yes="default" ;;
	a)
		for a in $(echo "$OPTARG" | tr "," " "); do
			# Is a range
			echo "$a" | grep -E "[0-9]"*-"[0-9]" &>/dev/null && actions="$actions $(eval echo {$(echo $a | sed "s/-/../")})"
			# Is a number
			[ "$a" -eq 0 ] &>/dev/null
			[ $? -le 1 ] && actions="$actions $a"
		done
		;;
	*) echo "$(basename "$0"): Invalid flag -- '-$OPTARG'" && help 1 ;;
	esac
done

#=== CHECKS =======================================================================
[ ! "$list" ] && [ "$(id -u)" -ne 0 ] && echo "Administrative privileges needed" && exit 1
if ! cat /etc/*release | grep -Ei "arch|reborn|react" &>/dev/null; then
	echo "Seems you are not running Arch Linux distro"
	echo "Some actions may fail. Cross your fingers and press enter..."
	read -s # Dont display keys
fi

#=== EXEC-ACTIONS ==================================================================
# Some packages come from Arch User Repos, and makepkg can not install as root
# we need to set a temporary folder to be able to compile and install packages from thre
# as "nobody" (also we need to setup sudoers to let nobody exec makepkg as root)
[ $(id -u) == 0 ] && echo "nobody ALL=(ALL) NOPASSWD: ALL" >>/etc/sudoers

base_dir="$(dirname "$(readlink -f "$0")")"
echo "$PATH" | grep -q sbin || export PATH="/sbin/:/usr/sbin:$PATH"
n=0

# For each .sh file
IFS=$'\n\t'
shopt -s extglob
for script in \
	"$base_dir"/install_*/install.sh \
	"$base_dir"/config_*/install.sh \
	"$base_dir"/script_*/install.sh \
	"$base_dir"/theme_*/install.sh; do
	head="$(head -10 "$script")"
	# Get ACTION field:
	action="$(echo "$head" | grep "#[[:blank:]]*ACTION:" | sed 's/#[[:blank:]]*ACTION:[[:blank:]]*//')"
	[ ! "$action" ] && continue
	# Get INFO field:
	info="$(echo "$head" | grep "#[[:blank:]]*INFO:" | sed 's/#[[:blank:]]*INFO:[[:blank:]]*//')"
	# Get DEFAULT field:
	default="$(echo "$head" | grep "#[[:blank:]]*DEFAULT:" | sed 's/#[[:blank:]]*DEFAULT:[[:blank:]]*//')"

	if ask_action "$action" "$info" "$default"; then
		bash "$script" # EXEC SCRIPT
	fi
done

[ $(id -u) == 0 ] && sed -i '/nobody/d' /etc/sudoers # Delete nobody from sudoers

if [ ! "$list" ] && [ ! "$actions" ] && ask_action "Reboot" "" "y"; then
	reboot
fi
echo
